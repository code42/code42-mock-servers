openapi: 3.0.1
info:
  title: Alert Service API
  description: The Alert Service APIs use a token based authentication scheme. Each
    request requires the authorization header be set with a scheme of v3_user_token
    and the token value as the credential. Sample cURL requests can be generated by
    clicking the 'try it out' button followed by the 'execute' button for each request.
  version: 1.0.0
servers:
- url: /
paths:
  /:
    get:
      summary: Check the health of the mock microservice container
      responses:
        200:
          description: A successful response
          content:
            text/plain:
              example: healthcheck-success
  /svc/api/v1/update-state:
    post:
      tags:
      - Alerts
      summary: Change the state of a set of alerts
      operationId: Alerts_UpdateAlertState
      requestBody:
        description: The command to change the state of the given alerts.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateStateCommand-alerts'
        required: true
      responses:
        200:
          description: 'Success: Given alerts are updated to the indicated status.'
          content:
            application/json:
              schema:
                type: object
  /svc/api/v1/add-note:
    post:
      tags:
      - Alerts
      summary: Add a note to an alert
      operationId: Alerts_AddNoteToAlert
      requestBody:
        description: Add note command for the alert.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddNoteCommand-alerts'
        required: true
      responses:
        200:
          description: 'Success: Note is added to the alert.'
  /svc/api/v1/query-alerts:
    post:
      tags:
      - Alerts
      summary: Search for alerts
      operationId: Alerts_QueryAlert
      requestBody:
        description: The search query to execute.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SearchQuery-alerts'
        required: true
      responses:
        200:
          description: 'Success: Response containing alerts that match the provided
            query.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AlertQueryResponse-alerts'
  /svc/api/v1/query-details:
    post:
      tags:
      - Alerts
      summary: Get details about an alert
      operationId: Alerts_QueryAlertDetails
      requestBody:
        description: The alert id query to execute.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DetailsQuery-alerts'
        required: true
      responses:
        200:
          description: 'Success: Response containing alerts that match the provided
            query.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AlertDetailsResponse-alerts'
  /svc/api/v1/query-details-aggregate:
    post:
      tags:
      - Alerts
      summary: Get aggregated data about a set of alerts
      operationId: Alerts_QueryAlertDetailsAggregate
      requestBody:
        description: The alert id query to execute.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DetailsInAggregateQuery-alerts'
        required: true
      responses:
        200:
          description: 'Success: Response containing alerts that match the provided query.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AlertDetailsInAggregateResponse-alerts'
  /svc/api/v1/rules/query-rule-metadata:
    post:
      tags:
      - Rules
      summary: Query list of all rules in the alerting application.
      operationId: Rules_QueryRuleMetadata
      requestBody:
        description: The RuleMetadataSearchQuery to execute.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RuleMetadataSearchQuery-alerts'
        required: true
      responses:
        200:
          description: 'Success: Response containing rules that match the provided query.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RuleMetadataSearchResponse-alerts'
components:
  schemas:
    DomainValue-alerts:
      type: object
      x-abstract: true
    UpdateStateCommand-alerts:
      allOf:
      - $ref: '#/components/schemas/DomainValue-alerts'
      - required:
        - alertIds
        - state
        - tenantId
        type: object
        properties:
          tenantId:
            maxLength: 40
            type: string
            description: The unique identifier representing the tenant.
            example: MyExampleTenant
          alertIds:
            type: array
            description: The unique identifiers representing the alerts you want to
              act upon.
            example:
            - ExampleAlertId1
            - ExampleAlertId2
            items:
              type: string
          state:
            $ref: '#/components/schemas/AlertState-alerts'
          note:
            maxLength: 2000
            type: string
            description: An optional note to attach to the alert
            example: This is an example note.
    AlertState-alerts:
      type: string
      description: Enum indicating possible alert states.
      example: OPEN
      pattern: '(?i)^OPEN|RESOLVED|PENDING|IN_PROGRESS$'
    AddNoteCommand-alerts:
      allOf:
      - $ref: '#/components/schemas/DomainValue-alerts'
      - required:
        - alertId
        - note
        - tenantId
        type: object
        properties:
          tenantId:
            maxLength: 40
            type: string
            description: The unique identifier representing the tenant.
            example: MyExampleTenant
          alertId:
            maxLength: 40
            type: string
            description: The unique identifier representing the alert you want to
              act upon.
            example: ExampleAlertId
          note:
            maxLength: 2000
            type: string
            description: The note to attach to the alert.
            example: This is an example note.
    AlertQueryResponse-alerts:
      allOf:
      - $ref: '#/components/schemas/DomainValue-alerts'
      - required:
        - totalCount
        type: object
        properties:
          alerts:
            type: array
            description: List of alerts that are returned.
            items:
              $ref: '#/components/schemas/AlertSummary-alerts'
          totalCount:
            type: integer
            description: The number of alerts that match the given query.
            format: int64
            example: 3
          problems:
            type: array
            description: Potential issues that were hit while trying to run the query.
            example: []
            items:
              $ref: '#/components/schemas/QueryProblem-alerts'
    AlertSummary-alerts:
      allOf:
      - $ref: '#/components/schemas/AlertEssentials-alerts'
      - required:
        - createdAt
        - state
        type: object
        properties:
          id:
            type: string
            description: The unique id of the alert.
            example: alertId
          createdAt:
            type: string
            description: The timestamp when the alert was created.
            format: date-time
            example: 2020-02-19T01:57:45.006683Z
          state:
            $ref: '#/components/schemas/AlertState-alerts'
          stateLastModifiedBy:
            type: string
          stateLastModifiedAt:
            type: string
            format: date-time
    AlertEssentials-alerts:
      allOf:
      - $ref: '#/components/schemas/DomainValue-alerts'
      - required:
        - severity
        - tenantId
        - type
        type: object
        properties:
          tenantId:
            maxLength: 40
            type: string
            description: The unique identifier representing the tenant.
            example: MyExampleTenant
          type:
            $ref: '#/components/schemas/RuleType-alerts'
          name:
            type: string
            description: The name of the alert.  Same as the name of the rule that
              triggered it.
            example: Removable Media Exfiltration Rule
          description:
            type: string
            description: The description of the alert.  Same as the description of
              the rule that triggered it.
            example: Alert me on all removable media exfiltration.
          actor:
            type: string
            description: The user who triggered the alert.
            example: exampleUser@mycompany.com
          actorId:
            type: string
            description: The authority user id who triggered the alert, if it is available.
            example: authorityUserId
          target:
            type: string
          severity:
            $ref: '#/components/schemas/SeverityRating-alerts'
          notificationInfo:
            type: array
            description: Notification information of the alert.  Not queried/returned.
            example: []
            items:
              $ref: '#/components/schemas/NotificationInfo-alerts'
          ruleId:
            type: string
            description: The unique id corresponding to the rule which triggered the
              alert.
            example: uniqueRuleId
          ruleSource:
            type: string
            description: Indicates source of rule creation.  Either alerting or lens
              application name.
            example: Departing Employee
    RuleType-alerts:
      type: string
      description: Rule type that generates alerts.
      example: FED_ENDPOINT_EXFILTRATION
      pattern: '(?i)^FED_(ENDPOINT_EXFILTRATION|CLOUD_SHARE_PERMISSIONS|FILE_TYPE_MISMATCH|FILE_NAME_MATCH)$'
    SeverityRating-alerts:
      type: string
      description: Possible severity values for an alert.
      pattern: '(?i)^LOW|MEDIUM|HIGH$'
    NotificationInfo-alerts:
      allOf:
      - $ref: '#/components/schemas/DomainValue-alerts'
      - required:
        - notificationType
        type: object
        properties:
          notificationType:
            $ref: '#/components/schemas/NotificationType-alerts'
          notificationAddress:
            type: string
            description: Address notification was sent to.
            example: myUsername@company.com
    NotificationType-alerts:
      type: string
      description: Type of notification.
      example: EMAIL
      enum:
      - EMAIL
      x-enumNames:
      - Email
    QueryProblem-alerts:
      allOf:
      - $ref: '#/components/schemas/DomainValue-alerts'
      - required:
        - type
        type: object
        properties:
          badFilter:
            type: string
            description: The filter that caused the issue.
          type:
            $ref: '#/components/schemas/ProblemType-alerts'
    ProblemType-alerts:
      type: string
      description: Potential issues when running a query on alerts.
      example: SearchFailed
      enum:
      - IllegalValue
      - IllegalOperator
      - MustBeEmailAddress
      - MaxLengthExceeded
      - InvalidPageSize
      - InvalidPageNumber
      - MissingValue
      - MissingGroups
      - MissingFilters
      - MaxFiltersExceeded
      - SearchFailed
      x-enumNames:
      - IllegalValue
      - IllegalOperator
      - MustBeEmailAddress
      - MaxLengthExceeded
      - InvalidPageSize
      - InvalidPageNumber
      - MissingValue
      - MissingGroups
      - MissingFilters
      - MaxFiltersExceeded
      - SearchFailed
    SearchQuery-alerts:
      allOf:
      - $ref: '#/components/schemas/DomainValue-alerts'
      - required:
        - groupClause
        - pgNum
        - pgSize
        - srtKey
        - tenantId
        type: object
        properties:
          tenantId:
            maxLength: 40
            type: string
            description: The unique identifier representing the tenant.
            example: MyExampleTenant
          groups:
            type: array
            items:
              $ref: '#/components/schemas/FilterGroup-alerts'
          groupClause:
            type: string
            description: The clause to use when combining group filters.  Must be
              AND/OR.
            example: OR
          pgSize:
            maximum: 5E+2
            type: integer
            description: The number of items to return in one request.  Value must
              be between 0 and 100.
            format: int32
            example: 20
          pgNum:
            type: integer
            description: The page number to return. Page 0 is the first page of results.
            format: int32
            example: 0
          srtKey:
            type: string
            description: 'The alert attribute to sort by.  Value must be one of: AlertId,
              TenantId, Type, Name, Description, Actor, ActorId, Target, Severity,
              RuleSource, CreatedAt, Observations, Notes, State, StateLastModifiedAt,
              StateLastModifiedBy, LastModifiedTime, LastModifiedBy, RuleId'
            example: CreatedAt
          srtDirection:
            $ref: '#/components/schemas/SortDirection-alerts'
    FilterGroup-alerts:
      allOf:
      - $ref: '#/components/schemas/DomainValue-alerts'
      - required:
        - filterClause
        - filters
        type: object
        properties:
          filters:
            type: array
            description: The list of search filters to query on.
            items:
              $ref: '#/components/schemas/SearchFilter-alerts'
          filterClause:
            $ref: '#/components/schemas/SearchClause-alerts'
    SearchFilter-alerts:
      allOf:
      - $ref: '#/components/schemas/DomainValue-alerts'
      - required:
        - operator
        - term
        - value
        type: object
        properties:
          term:
            type: string
            description: "The alert or rule metadata attribute to search on.\n\nFor\
              \ alert queries, value must be one of: AlertId, TenantId, Type, Name,\
              \ Description, Actor, ActorId, Target, Severity, RuleSource, CreatedAt,\
              \ Observations, Notes, State, StateLastModifiedAt, StateLastModifiedBy,\
              \ LastModifiedTime, LastModifiedBy, RuleId.\n\nFor rule queries, value\
              \ must be one of RuleMetadataId, TenantId, ObserverRuleId, Type, Name,\
              \ Description, Severity, IsSystem, IsEnabled, RuleSource, ModifiedAt,\
              \ ModifiedBy, CreatedAt, CreatedBy, LogString. "
            example: Name
          operator:
            $ref: '#/components/schemas/FilterOperator-alerts'
          value:
            type: string
            description: The value you want to use in the filter.
            example: This is a name.
    FilterOperator-alerts:
      type: string
      description: The filter operator to use.
      example: IS
      enum:
      - IS
      - IS_NOT
      - ON_OR_BEFORE
      - ON_OR_AFTER
      - ON
      - LESS_THAN
      - GREATER_THAN
      - CONTAINS
      - DOES_NOT_CONTAIN
      x-enumNames:
      - Is
      - IsNot
      - OnOrBefore
      - OnOrAfter
      - On
      - LessThan
      - GreaterThan
      - Contains
      - DoesNotContain
    SearchClause-alerts:
      type: string
      description: The filter clause to use when combining the search filters.  Must
        be AND/OR.s
      example: AND
      enum:
      - AND
      - OR
      x-enumNames:
      - And
      - Or
    SortDirection-alerts:
      type: string
      description: The sort direction applied to the returned page of alerts.
      example: DESC
      pattern: '(?i)^ASC|DESC$'
    AlertDetailsResponse-alerts:
      allOf:
      - $ref: '#/components/schemas/DomainValue-alerts'
      - type: object
        properties:
          alerts:
            type: array
            description: The alerts returned by the details query.
            items:
              $ref: '#/components/schemas/AlertDetails-alerts'
    AlertDetails-alerts:
      allOf:
      - $ref: '#/components/schemas/AlertSummary-alerts'
      - type: object
        properties:
          observations:
            type: array
            description: Observation list included on the alert.
            items:
              $ref: '#/components/schemas/Observation-alerts'
          note:
            $ref: '#/components/schemas/Note-alerts'
    Observation-alerts:
      allOf:
      - $ref: '#/components/schemas/DomainValue-alerts'
      - required:
        - observedAt
        type: object
        properties:
          id:
            type: string
            description: Id of given observation.
            example: uniqueObservationId
          observedAt:
            type: string
            description: Timestamp of when the observation was observed.
            format: date-time
            example: 2020-02-19T01:57:45.006683Z
          type:
            type: string
            description: The type of observation data recorded.
            example: FedCloudSharePermissions
          data:
            type: string
            description: The JSON formatted observation data rolled into one aggregation.
            example: '{"type$":"OBSERVED_CLOUD_SHARE_ACTIVITY","id":"exampleId","sources":["OneDrive"],"exposureTypes":["PublicLinkShare"],"firstActivityAt":"2020-02-19T01:50:00.0000000Z","lastActivityAt":"2020-02-19T01:55:00.0000000Z","fileCount":2,"totalFileSize":200,"fileCategories":[{"type$":"OBSERVED_FILE_CATEGORY","category":"Document","fileCount":2,"totalFileSize":53,"isSignificant":false}],"outsideTrustedDomainsEmailsCount":0,"outsideTrustedDomainsTotalDomainCount":0,"outsideTrustedDomainsTotalDomainCountTruncated":false}'
    Note-alerts:
      allOf:
      - $ref: '#/components/schemas/DomainValue-alerts'
      - required:
        - lastModifiedAt
        type: object
        properties:
          id:
            type: string
            description: Unique id of the note.
            example: noteId
          lastModifiedAt:
            type: string
            description: Timestamp of when the note was last modified.
            format: date-time
            example: 2020-02-19T01:57:45.006683Z
          lastModifiedBy:
            type: string
            description: User who last modified the note.
            example: exampleUsername
          message:
            type: string
            description: The note itself.
            example: This is a note.
    DetailsQuery-alerts:
      allOf:
      - $ref: '#/components/schemas/DomainValue-alerts'
      - required:
        - alertIds
        type: object
        properties:
          alertIds:
            type: array
            description: The unique identifiers representing the alerts you want to
              act upon.
            example:
            - ExampleAlertId1
            - ExampleAlertId2
            items:
              type: string
    AlertDetailsInAggregateResponse-alerts:
      allOf:
      - $ref: '#/components/schemas/DomainValue-alerts'
      - type: object
        properties:
          alert:
            $ref: '#/components/schemas/AlertDetailsAggregate-alerts'
    AlertDetailsAggregate-alerts:
      allOf:
      - $ref: '#/components/schemas/AlertSummary-alerts'
      - type: object
        properties:
          observation:
            $ref: '#/components/schemas/ObservationAggregate-alerts'
          note:
            $ref: '#/components/schemas/Note-alerts'
    ObservationAggregate-alerts:
      allOf:
      - $ref: '#/components/schemas/DomainValue-alerts'
      - required:
        - observedAt
        type: object
        properties:
          observedAt:
            type: string
            description: Timestamp of when the observation was observed.
            format: date-time
            example: 2020-02-19T01:57:45.006683Z
          type:
            type: string
            description: The type of observation data recorded.
            example: FedCloudSharePermissions
          data:
            type: string
            description: The JSON formatted observation data rolled into one aggregation.
            example: '{"type$":"OBSERVED_CLOUD_SHARE_ACTIVITY","id":"exampleId","sources":["OneDrive"],"exposureTypes":["PublicLinkShare"],"firstActivityAt":"2020-02-19T01:50:00.0000000Z","lastActivityAt":"2020-02-19T01:55:00.0000000Z","fileCount":2,"totalFileSize":200,"fileCategories":[{"type$":"OBSERVED_FILE_CATEGORY","category":"Document","fileCount":2,"totalFileSize":53,"isSignificant":false}],"outsideTrustedDomainsEmailsCount":0,"outsideTrustedDomainsTotalDomainCount":0,"outsideTrustedDomainsTotalDomainCountTruncated":false}'
    DetailsInAggregateQuery-alerts:
      allOf:
      - $ref: '#/components/schemas/DomainValue-alerts'
      - required:
        - alertId
        type: object
        properties:
          alertId:
            maxLength: 40
            type: string
            description: The unique identifier representing the alert you want to
              act upon.
            example: ExampleAlertId
    RuleMetadataSearchResponse-alerts:
      allOf:
      - $ref: '#/components/schemas/DomainValue-alerts'
      - required:
        - totalCount
        type: object
        properties:
          ruleMetadata:
            type: array
            description: List of rules that are returned.
            items:
              $ref: '#/components/schemas/RuleMetadata-alerts'
          totalCount:
            type: integer
            description: The number of rules that match the given query.
            format: int64
            example: 3
          problems:
            type: array
            description: Potential issues that were hit while trying to run the query.
            example: []
            items:
              $ref: '#/components/schemas/QueryProblem-alerts'
    RuleMetadata-alerts:
      allOf:
      - $ref: '#/components/schemas/ObserverRuleMetadataEssentials-alerts'
      - required:
        - createdAt
        type: object
        properties:
          id:
            type: string
            description: Id of the rule.
            example: UniqueRuleId
          createdBy:
            type: string
            description: Username of the individual who created the rule.
            example: UserWhoCreatedTheRule
          createdAt:
            type: string
            description: Timestamp of when the rule was created.
            format: date-time
            example: 2020-02-19T01:57:45.006683Z
    ObserverRuleMetadataEssentials-alerts:
      allOf:
      - $ref: '#/components/schemas/ObserverRuleMetadata-alerts'
      - required:
        - tenantId
        - type
        type: object
        properties:
          tenantId:
            maxLength: 40
            type: string
            description: The unique identifier representing the tenant.
            example: MyExampleTenant
          observerRuleId:
            type: string
            description: Id of the rule in the observer.
            example: UniqueRuleId
          type:
            $ref: '#/components/schemas/RuleType-alerts'
    ObserverRuleMetadata-alerts:
      allOf:
      - $ref: '#/components/schemas/AuditInfo-alerts'
      - required:
        - isEnabled
        - isSystem
        - severity
        type: object
        properties:
          name:
            type: string
            description: The name of the rule.
            example: My Removable Media Exfiltration Rule
          description:
            type: string
            description: The description of the rule.
            example: Will generate alerts when files moved to USB.
          severity:
            $ref: '#/components/schemas/SeverityRating-alerts'
          isSystem:
            type: boolean
            description: Boolean indicating if the rule was created from another Code42
              Application.
            example: false
          isEnabled:
            type: boolean
            description: Boolean indicating if the rule is enabled to trigger alerts.
            example: true
          ruleSource:
            type: string
            description: The source of the rule.  Will be one of [DepartingEmployee,
              Alerting, HighRiskEmployee]
            example: Alerting
    AuditInfo-alerts:
      allOf:
      - $ref: '#/components/schemas/DomainValue-alerts'
      - required:
        - modifiedAt
        type: object
        properties:
          modifiedBy:
            type: string
            description: Username of the individual who last modified the rule.
            example: UserWhoMostRecentlyModifiedTheRule
          modifiedAt:
            type: string
            description: Timestamp of when the rule was last modified.
            format: date-time
            example: 2020-02-19T01:57:45.006683Z
    RuleMetadataSearchQuery-alerts:
      allOf:
      - $ref: '#/components/schemas/DomainValue-alerts'
      - required:
        - groupClause
        - pgNum
        - pgSize
        - srtKey
        - tenantId
        type: object
        properties:
          tenantId:
            maxLength: 40
            type: string
            description: The unique identifier representing the tenant.
            example: MyExampleTenant
          groups:
            type: array
            items:
              $ref: '#/components/schemas/FilterGroup-alerts'
          groupClause:
            type: string
            description: The clause to use when combining group filters.  Must be
              AND/OR.
            example: OR
          pgSize:
            maximum: 5E+2
            type: integer
            description: The number of items to return in one request.  Value must
              be between 0 and 100.
            format: int32
            example: 20
          pgNum:
            type: integer
            description: The page number to return. Page 0 is the first page of results.
            format: int32
            example: 0
          srtKey:
            type: string
            description: 'The rule metadata attribute to sort by.  Value must be one
              of: RuleMetadataId, TenantId, ObserverRuleId, Type, Name, Description,
              Severity, IsSystem, IsEnabled, RuleSource, ModifiedAt, ModifiedBy, CreatedAt,
              CreatedBy, LogString'
            example: CreatedAt
          srtDirection:
            $ref: '#/components/schemas/SortDirection-alerts'
